"""
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# --- API sozlamalari ---
TOKEN = '8129968556:AAEhqIxEZKzIZO15ye2UyP8gKpJODak1Qtg'  # <-- BU YERGA O'Z TOKENINGIZNI YOZING
API_BASE = "https://v6.exchangerate-api.com/v6/075da83e108bde274389c814/latest/"
SUPPORTED_DIRECTIONS = ['USD_RUB', 'RUB_USD', 'EUR_RUB']

# --- Bot holatlari ---
SELECT_DIRECTION, GET_AMOUNT = range(2)
user_context = {}

# --- Valyuta kursini olish ---
def get_exchange_rate(base: str, target: str) -> float | None:
    try:
        response = requests.get(f"{API_BASE}{base}", timeout=10)
        data = response.json()
        if data['result'] == 'success':
            return data['conversion_rates'].get(target)
    except:
        return None
    return None

# --- Hisoblash logikasi ---
def convert_currency(amount: float, direction: str) -> str:
    base, target = direction.split("_")
    rate = get_exchange_rate(base, target)

    if rate is None:
        return "‚ùå Kurslarni olishda xatolik yuz berdi."

    result = round(amount * rate, 2)
    return f"{amount} {base} ‚âà {result} {target}"

# --- Klaviatura ---
def get_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("USD <> RUB", callback_data='USD_RUB')],
        [InlineKeyboardButton("RUB <> USD", callback_data='RUB_USD')],
        [InlineKeyboardButton("EUR <> RUB", callback_data='EUR_RUB')],
    ])

# --- /start komandasi ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üí± Valyuta yo‚Äònalishini tanlang:", reply_markup=get_keyboard())
    return SELECT_DIRECTION

# --- Valyuta yo‚Äònalishi tanlanganda ---
async def direction_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data not in SUPPORTED_DIRECTIONS:
        await query.edit_message_text("‚ùå Noto‚Äòg‚Äòri yo‚Äònalish tanlandi.")
        return ConversationHandler.END

    user_context[query.from_user.id] = {'direction': query.data}
    await query.edit_message_text("üí∞ Miqdorni kiriting (faqat son):")
    return GET_AMOUNT

# --- Miqdor kiritinganda ---
async def amount_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    direction = user_context.get(user_id, {}).get('direction')

    try:
        amount = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è Faqat son kiriting. Masalan: 1000")
        return GET_AMOUNT

    result_text = convert_currency(amount, direction)
    await update.message.reply_text(result_text)
    return ConversationHandler.END

# --- /cancel komandasi ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå Bekor qilindi.")
    return ConversationHandler.END

# --- Botni ishga tushirish ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_DIRECTION: [CallbackQueryHandler(direction_selected)],
            GET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_entered)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    print("‚úÖ Bot ishga tushdi...")
    app.run_polling()

if __name__ == "__main__":
    main()
"""
"""
import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# --- API sozlamalari ---
TOKEN = '8198907146:AAHyB4w-HhVNQsed9PxHSNLFSZHximUj_0U'  # <-- O'z tokeningizni shu yerga yozing
API_BASE = "https://v6.exchangerate-api.com/v6/075da83e108bde274389c814/latest/"

# --- Qo‚Äòllab-quvvatlanadigan yo‚Äònalishlar ---
SUPPORTED_DIRECTIONS = ['USD_RUB', 'RUB_USD', 'EUR_RUB']
DIRECTION_LABELS = {
    'USD_RUB': 'üá∫üá∏USD ‚û°Ô∏è RUBüá∑üá∫',
    'RUB_USD': 'üá∑üá∫RUB ‚û°Ô∏è USD',
    'EUR_RUB': 'üá™üá∫EUR ‚û°Ô∏è RUBüá∑üá∫',
}

# --- Holatlar ---
SELECT_DIRECTION, GET_AMOUNT = range(2)
user_context = {}

# --- Valyuta kursini olish funksiyasi ---
def get_exchange_rate(base: str, target: str) -> float | None:
    try:
        response = requests.get(f"{API_BASE}{base}", timeout=10)
        data = response.json()
        if data['result'] == 'success':
            return data['conversion_rates'].get(target)
    except:
        return None
    return None

# --- Konvertatsiya qilish ---
def convert_currency(amount: float, direction: str) -> str:
    base, target = direction.split("_")
    rate = get_exchange_rate(base, target)
    if rate is None:
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤."
    result = round(amount * rate, 2)
    return f"{amount} {base} ‚âà {result} {target}"

# --- Valyuta tanlash uchun tugmalar ---
def get_direction_keyboard():
    buttons = [[label] for label in DIRECTION_LABELS.values()]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

# --- /start komandasi ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí± –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã:",
        reply_markup=get_direction_keyboard()
    )
    return SELECT_DIRECTION

# --- Valyuta yo‚Äònalishi tanlanganda ---
async def direction_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    label = update.message.text
    direction = next((k for k, v in DIRECTION_LABELS.items() if v == label), None)

    if direction is None:
        await update.message.reply_text("‚ö†Ô∏è –ë—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..")
        return SELECT_DIRECTION

    user_context[update.message.from_user.id] = {'direction': direction}
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardRemove())
    return GET_AMOUNT

# --- Miqdor kiritinganda ---
async def amount_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    direction = user_context.get(user_id, {}).get('direction')

    try:
        amount = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 1000")
        return GET_AMOUNT

    result_text = convert_currency(amount, direction)
    await update.message.reply_text(result_text)
    return ConversationHandler.END

# --- /cancel komandasi ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- Botni ishga tushirish ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_DIRECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, direction_selected)],
            GET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_entered)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    print("‚úÖ Bot ishga tushdi...")
    app.run_polling()

if __name__ == "__main__":
    main()
"""

import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)

# --- API sozlamalari ---
TOKEN = '8198907146:AAHyB4w-HhVNQsed9PxHSNLFSZHximUj_0U'  # <-- O'z tokeningizni shu yerga yozing
API_BASE = "https://v6.exchangerate-api.com/v6/075da83e108bde274389c814/latest/"

# --- Qo‚Äòllab-quvvatlanadigan yo‚Äònalishlar ---
SUPPORTED_DIRECTIONS = ['USD_RUB', 'RUB_USD', 'EUR_RUB']
DIRECTION_LABELS = {
    'USD_RUB': 'üá∫üá∏USD ‚û°Ô∏è RUBüá∑üá∫',
    'RUB_USD': 'üá∑üá∫RUB ‚û°Ô∏è USD',
    'EUR_RUB': 'üá™üá∫EUR ‚û°Ô∏è RUBüá∑üá∫',
}

# --- Valyutalar ro‚Äòyxati ---
valyutalar = [
    {'nomi': '–ê“ö–® –¥–æ–ª–ª–∞—Ä–∏', 'kodi': 'USD'},
    {'nomi': '–ï–≤—Ä–æ', 'kodi': 'EUR'},
    {'nomi': '–ë—É—é–∫ –ë—Ä–∏—Ç–∞–Ω–∏—è —Ñ—É–Ω—Ç–∏', 'kodi': 'GBP'},
    {'nomi': '–Ø–ø–æ–Ω–∏—è –∏–µ–Ω–∞—Å–∏', 'kodi': 'JPY'},
    {'nomi': '–®–≤–µ–π—Ü–∞—Ä–∏—è —Ñ—Ä–∞–Ω–∫–∏', 'kodi': 'CHF'},
    {'nomi': '–•–∏—Ç–æ–π —é–∞–Ω–∏', 'kodi': 'CNY'},
    {'nomi': '–ê–≤—Å—Ç—Ä–∞–ª–∏—è –¥–æ–ª–ª–∞—Ä–∏', 'kodi': 'AUD'},
    {'nomi': '–ö–∞–Ω–∞–¥–∞ –¥–æ–ª–ª–∞—Ä–∏', 'kodi': 'CAD'},
    {'nomi': '–î–∞–Ω–∏—è –∫—Ä–æ–Ω–∞—Å–∏', 'kodi': 'DKK'},
    {'nomi': '–ì–æ–Ω–∫–æ–Ω–≥ –¥–æ–ª–ª–∞—Ä–∏', 'kodi': 'HKD'},
    {'nomi': '–ò–Ω–¥–æ–Ω–µ–∑–∏—è —Ä—É–ø–∏—è—Å–∏', 'kodi': 'IDR'},
    {'nomi': '“≤–∏–Ω–¥–∏—Å—Ç–æ–Ω —Ä—É–ø–∏—è—Å–∏', 'kodi': 'INR'},
    {'nomi': '–ò—Å—Ä–æ–∏–ª —è–Ω–≥–∏ —à–µ–∫–µ–ª–∏', 'kodi': 'ILS'},
    {'nomi': '–ö–æ—Ä–µ—è —á–æ–Ω–≤–æ–Ω–∏', 'kodi': 'KRW'},
    {'nomi': '–ú–∞–ª–∞–π–∑–∏—è —Ä–∏–Ω–≥–≥–∏—Ç–∏', 'kodi': 'MYR'},
    {'nomi': '–ú–µ–∫—Å–∏–∫–∞ –ø–µ—Å–æ—Å–∏', 'kodi': 'MXN'},
    {'nomi': '–ù–æ—Ä–≤–µ–≥–∏—è –∫—Ä–æ–Ω–∞—Å–∏', 'kodi': 'NOK'},
    {'nomi': '“ö–æ–∑–æ“ì–∏—Å—Ç–æ–Ω —Ç–µ–Ω–≥–µ—Å–∏', 'kodi': 'KZT'},
    {'nomi': '“ö–∞—Ç–∞—Ä —Ä–∏—ë–ª–∏', 'kodi': 'QAR'},
    {'nomi': '–é–∑–±–µ–∫–∏—Å—Ç–æ–Ω —Å—û–º–∏', 'kodi': 'UZS'},
    {'nomi': '–°–∞—É–¥–∏—è –ê—Ä–∞–±–∏—Å—Ç–æ–Ω–∏ —Ä–∏—ë–ª–∏', 'kodi': 'SAR'},
    {'nomi': '–°–∏–Ω–≥–∞–ø—É—Ä –¥–æ–ª–ª–∞—Ä–∏', 'kodi': 'SGD'},
    {'nomi': '–•–æ—Ä–≤–∞—Ç–∏—è –∫—É–Ω–∞—Å–∏', 'kodi': 'HRK'},
    {'nomi': '–ß–µ—Ö–∏—è –∫—Ä–æ–Ω–∞—Å–∏', 'kodi': 'CZK'},
    {'nomi': '–≠—Å—Ç–æ–Ω–∏—è –ø–µ—Å–µ—Ç–∞—Å–∏', 'kodi': 'ESP'},
    {'nomi': '–ò–æ—Ä–¥–∞–Ω–∏—è –¥–∏–Ω–æ—Ä–∏', 'kodi': 'JOD'},
    {'nomi': '–ö–µ–Ω–∏—è —à–∏–ª–ª–∏–Ω–≥–∏', 'kodi': 'KES'},
    {'nomi': '–ö—É–±–∞ –ø–µ—Å–æ—Å–∏', 'kodi': 'CUP'},
    {'nomi': '–ú–∞—Ä–æ–∫–∞—à –¥–∏—Ä“≥–∞–º–∏', 'kodi': 'MAD'},
    {'nomi': '–ù–∏–¥–µ—Ä–ª–∞–Ω–¥–∏—è –≥—É–ª–¥–µ–Ω–∏', 'kodi': 'NLG'},
    {'nomi': '–ü–æ–∫–∏—Å—Ç–æ–Ω —Ä—É–ø–∏—è—Å–∏', 'kodi': 'PKR'},
    {'nomi': '–ü–∞–Ω–∞–º–∞ –±–∞–ª–±–æ–∞—Å–∏', 'kodi': 'PAB'},
    {'nomi': '–ü–µ—Ä—É —Å–æ–ª–∏', 'kodi': 'PEN'},
    {'nomi': '–ü–æ–ª—å—à–∞ –∑–ª–æ—Ç–∏–π–∏', 'kodi': 'PLN'},
    {'nomi': '–†—É–º–∏–Ω–∏—è –ª–µ–π–∏', 'kodi': 'RON'},
    {'nomi': '–°—É–¥–∞–Ω —Ñ—É–Ω—Ç–∏', 'kodi': 'SDG'},
]

# --- Holatlar ---
SELECT_DIRECTION, GET_AMOUNT = range(2)
user_context = {}

# --- Valyuta kursini olish funksiyasi ---
def get_exchange_rate(base: str, target: str) -> float | None:
    try:
        response = requests.get(f"{API_BASE}{base}", timeout=10)
        data = response.json()
        if data['result'] == 'success':
            return data['conversion_rates'].get(target)
    except:
        return None
    return None

# --- Konvertatsiya qilish ---
def convert_currency(amount: float, direction: str) -> str:
    base, target = direction.split("_")
    rate = get_exchange_rate(base, target)
    if rate is None:
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤."
    result = round(amount * rate, 2)
    return f"{amount} {base} ‚âà {result} {target}"

# --- Valyuta yo‚Äònalishini tanlash uchun tugmalar ---
def get_direction_keyboard():
    buttons = [[label] for label in DIRECTION_LABELS.values()]
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

# --- Valyutalar ro‚Äòyxatidan birini tanlash uchun tugmalar ---
def get_currency_keyboard():
    buttons = [[val['nomi']] for val in valyutalar[:5]]
    buttons.append([val['nomi'] for val in valyutalar[5:10]])
    buttons.append([val['nomi'] for val in valyutalar[10:15]])
    buttons.append([val['nomi'] for val in valyutalar[15:20]])
    buttons.append([val['nomi'] for val in valyutalar[20:]])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True, one_time_keyboard=True)

# --- /start komandasi ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí± –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã:",
        reply_markup=get_direction_keyboard()
    )
    return SELECT_DIRECTION

# --- Valyuta yo‚Äònalishini tanlaganda ---
async def direction_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    label = update.message.text
    direction = next((k for k, v in DIRECTION_LABELS.items() if v == label), None)

    if direction is None:
        await update.message.reply_text("‚ö†Ô∏è –ë—ã–ª–æ –≤—ã–±—Ä–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑..")
        return SELECT_DIRECTION

    user_context[update.message.from_user.id] = {'direction': direction}
    await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):", reply_markup=ReplyKeyboardRemove())
    return GET_AMOUNT

# --- Miqdor kiritinganda ---
async def amount_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    direction = user_context.get(user_id, {}).get('direction')

    try:
        amount = float(update.message.text.replace(",", "."))
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 1000")
        return GET_AMOUNT

    result_text = convert_currency(amount, direction)
    await update.message.reply_text(result_text)
    return ConversationHandler.END

# --- /cancel komandasi ---
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

# --- Botni ishga tushirish ---
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_DIRECTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, direction_selected)],
            GET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, amount_entered)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    print("‚úÖ Bot ishga tushdi...")
    app.run_polling()

if __name__ == "__main__":
    main()

import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
import requests
from decimal import Decimal, InvalidOperation

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "8198907146:AAHyB4w-HhVNQsed9PxHSNLFSZHximUj_0U"
API_BASE = "https://v6.exchangerate-api.com/v6/075da83e108bde274389c814/latest/"


# –°–æ—Å—Ç–æ—è–Ω–∏—è
class CurrencyStates(StatesGroup):
    GET_AMOUNT = State()


# –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±–º–µ–Ω–∞
EXCHANGE_DIRECTIONS = {
    'USD_RUB': 'üá∫üá∏ USD ‚Üí RUB üá∑üá∫',
    'RUB_USD': 'üá∑üá∫ RUB ‚Üí USD üá∫üá∏',
    'EUR_RUB': 'üá™üá∫ EUR ‚Üí RUB üá∑üá∫',
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
async def get_exchange_rate(base: str, target: str) -> Decimal | None:
    try:
        response = requests.get(f"{API_BASE}{base}", timeout=10)
        response.raise_for_status()
        data = response.json()

        if data.get('result') == 'success':
            rate = data['conversion_rates'].get(target)
            if rate is not None:
                return Decimal(str(rate))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}")
    return None


# –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç—ã
async def convert_currency(amount: Decimal, direction: str) -> str:
    base, target = direction.split("_")
    rate = await get_exchange_rate(base, target)

    if rate is None:
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    result = (amount * rate).quantize(Decimal('0.01'))
    return f"üîπ –†–µ–∑—É–ª—å—Ç–∞—Ç: {amount} {base} ‚âà {result} {target}\nüî∏ –ö—É—Ä—Å: 1 {base} = {rate} {target}"


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –æ–±–º–µ–Ω–∞
def get_exchange_keyboard():
    keyboard = [
        [KeyboardButton(text=EXCHANGE_DIRECTIONS['USD_RUB'])],
        [KeyboardButton(text=EXCHANGE_DIRECTIONS['RUB_USD'])],
        [KeyboardButton(text=EXCHANGE_DIRECTIONS['EUR_RUB'])]
    ]
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)


# –ö–æ–º–∞–Ω–¥–∞ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –≤–∞–ª—é—Ç:",
        reply_markup=get_exchange_keyboard()
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@dp.message(F.text.in_(EXCHANGE_DIRECTIONS.values()))
async def direction_selected(message: types.Message, state: FSMContext):
    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
    direction_code = next(k for k, v in EXCHANGE_DIRECTIONS.items() if v == message.text)

    await state.update_data(direction=direction_code)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(CurrencyStates.GET_AMOUNT)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
@dp.message(CurrencyStates.GET_AMOUNT)
async def amount_entered(message: types.Message, state: FSMContext):
    try:
        amount = Decimal(message.text.replace(',', '.').strip())
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
    except (ValueError, InvalidOperation):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 150.50)")
        return

    data = await state.get_data()
    result = await convert_currency(amount, data['direction'])
    await message.answer(result)
    await state.clear()
    await cmd_start(message)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∏–∑ –º–µ–Ω—é:")
    await cmd_start(message)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –Ω–∞–∫–æ–ø–∏—Ç—å—Å—è –ø–æ–∫–∞ –±–æ—Ç –±—ã–ª –æ—Ñ—Ñ–ª–∞–π–Ω
    await bot.delete_webhook(drop_pending_updates=True)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    asyncio.run(main())
